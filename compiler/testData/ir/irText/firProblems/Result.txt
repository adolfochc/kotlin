FILE fqName:<root> fileName:/Result.kt
  FUN name:foo visibility:public modality:FINAL <T> (a:kotlin.Result<T of <root>.foo>) returnType:T of <root>.foo
    TYPE_PARAMETER name:T index:0 variance: superTypes:[kotlin.Any?]
    VALUE_PARAMETER name:a index:0 type:kotlin.Result<T of <root>.foo>
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun foo <T> (a: kotlin.Result<T of <root>.foo>): T of <root>.foo declared in <root>'
        CALL 'public final fun bar <T, R> (value: T of <root>.bar, f: <root>.FunIFace<T of <root>.bar, R of <root>.bar>): R of <root>.bar declared in <root>' type=T of <root>.foo origin=null
          <T>: kotlin.Result<T of <root>.foo>
          <R>: T of <root>.foo
          value: GET_VAR 'a: kotlin.Result<T of <root>.foo> declared in <root>.foo' type=kotlin.Result<T of <root>.foo> origin=null
          f: TYPE_OP type=<root>.FunIFace<kotlin.Result<T of <root>.foo>, T of <root>.foo> origin=SAM_CONVERSION typeOperand=<root>.FunIFace<kotlin.Result<T of <root>.foo>, T of <root>.foo>
            FUN_EXPR type=kotlin.Function1<@[ParameterName(name = 'ic')] kotlin.Result<T of <root>.foo>, T of <root>.foo> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL <> (it:kotlin.Result<T of <root>.foo>) returnType:T of <root>.foo
                VALUE_PARAMETER name:it index:0 type:kotlin.Result<T of <root>.foo>
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <anonymous> (it: kotlin.Result<T of <root>.foo>): T of <root>.foo declared in <root>.foo'
                    CALL 'public final fun getOrThrow <T> (): T of kotlin.ResultKt.getOrThrow [inline] declared in kotlin.ResultKt' type=T of <root>.foo origin=null
                      <T>: T of <root>.foo
                      $receiver: GET_VAR 'it: kotlin.Result<T of <root>.foo> declared in <root>.foo.<anonymous>' type=kotlin.Result<T of <root>.foo> origin=null
  CLASS INTERFACE name:FunIFace modality:ABSTRACT visibility:public [fun] superTypes:[kotlin.Any]
    $this: VALUE_PARAMETER INSTANCE_RECEIVER name:<this> type:<root>.FunIFace<T of <root>.FunIFace, R of <root>.FunIFace>
    TYPE_PARAMETER name:T index:0 variance: superTypes:[kotlin.Any?]
    TYPE_PARAMETER name:R index:1 variance: superTypes:[kotlin.Any?]
    FUN name:call visibility:public modality:ABSTRACT <> ($this:<root>.FunIFace<T of <root>.FunIFace, R of <root>.FunIFace>, ic:T of <root>.FunIFace) returnType:R of <root>.FunIFace
      $this: VALUE_PARAMETER name:<this> type:<root>.FunIFace<T of <root>.FunIFace, R of <root>.FunIFace>
      VALUE_PARAMETER name:ic index:0 type:T of <root>.FunIFace
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN <> ($this:kotlin.Any, other:kotlin.Any?) returnType:kotlin.Boolean [fake_override,operator]
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean [operator] declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any
      VALUE_PARAMETER name:other index:0 type:kotlin.Any?
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.Int [fake_override]
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN <> ($this:kotlin.Any) returnType:kotlin.String [fake_override]
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
      $this: VALUE_PARAMETER name:<this> type:kotlin.Any
  FUN name:bar visibility:public modality:FINAL <T, R> (value:T of <root>.bar, f:<root>.FunIFace<T of <root>.bar, R of <root>.bar>) returnType:R of <root>.bar
    TYPE_PARAMETER name:T index:0 variance: superTypes:[kotlin.Any?]
    TYPE_PARAMETER name:R index:1 variance: superTypes:[kotlin.Any?]
    VALUE_PARAMETER name:value index:0 type:T of <root>.bar
    VALUE_PARAMETER name:f index:1 type:<root>.FunIFace<T of <root>.bar, R of <root>.bar>
    BLOCK_BODY
      RETURN type=kotlin.Nothing from='public final fun bar <T, R> (value: T of <root>.bar, f: <root>.FunIFace<T of <root>.bar, R of <root>.bar>): R of <root>.bar declared in <root>'
        CALL 'public abstract fun call (ic: T of <root>.FunIFace): R of <root>.FunIFace declared in <root>.FunIFace' type=R of <root>.bar origin=null
          $this: GET_VAR 'f: <root>.FunIFace<T of <root>.bar, R of <root>.bar> declared in <root>.bar' type=<root>.FunIFace<T of <root>.bar, R of <root>.bar> origin=null
          ic: GET_VAR 'value: T of <root>.bar declared in <root>.bar' type=T of <root>.bar origin=null
  FUN name:box visibility:public modality:FINAL <> () returnType:kotlin.String
    BLOCK_BODY
      VAR name:res type:kotlin.Int [val]
        CALL 'public final fun plus (other: kotlin.Int): kotlin.Int [operator] declared in kotlin.Int' type=kotlin.Int origin=PLUS
          $this: CALL 'public final fun foo <T> (a: kotlin.Result<T of <root>.foo>): T of <root>.foo declared in <root>' type=kotlin.Int origin=null
            <T>: kotlin.Int
            a: CALL 'public final fun success <T> (value: T of kotlin.Result.Companion.success): kotlin.Result<T of kotlin.Result.Companion.success> [inline] declared in kotlin.Result.Companion' type=kotlin.Result<kotlin.Int> origin=null
              <T>: kotlin.Int
              $this: GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Companion modality:FINAL visibility:public [companion] superTypes:[kotlin.Any]' type=kotlin.Result.Companion
              value: CONST Int type=kotlin.Int value=40
          other: CONST Int type=kotlin.Int value=2
      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
        WHEN type=kotlin.String origin=IF
          BRANCH
            if: CALL 'public final fun not (): kotlin.Boolean [operator] declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCLEQ
              $this: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EXCLEQ
                arg0: GET_VAR 'val res: kotlin.Int [val] declared in <root>.box' type=kotlin.Int origin=null
                arg1: CONST Int type=kotlin.Int value=42
            then: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value="FAIL "
              GET_VAR 'val res: kotlin.Int [val] declared in <root>.box' type=kotlin.Int origin=null
          BRANCH
            if: CONST Boolean type=kotlin.Boolean value=true
            then: CONST String type=kotlin.String value="OK"
